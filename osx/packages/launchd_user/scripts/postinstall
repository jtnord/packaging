#!/bin/bash

JENKINS_PLIST="/Library/LaunchDaemons/@@OSX_IDPREFIX@@.plist"
DEFAULTS_PLIST="/Library/Preferences/@@OSX_IDPREFIX@@.plist"

# Because PackageMaker just copies the components, we need to fix the permissions
chown root:wheel ${JENKINS_PLIST}
chmod 644 ${JENKINS_PLIST}

JENKINS_HOMEDIR="/Users/Shared/@@CAMELARTIFACTNAME@@"
mkdir -p $JENKINS_HOMEDIR

if dscl . -list /Users/@@ARTIFACTNAME@@; then
    echo '@@ARTIFACTNAME@@ user already exists, attempting to change the shell to /bin/bash'
    # Will fail if UserShell is not /usr/bin/false, but that's ok.
    # Then we will assume an admin has changed it.
    dscl . -change /Users/@@ARTIFACTNAME@@ UserShell /usr/bin/false /bin/bash
else
    echo 'No @@ARTIFACTNAME@@ user found, creating @@ARTIFACTNAME@@ user and group'

# Find free uid under 500
    uid=$(dscl . -list /Users uid | sort -nrk 2 | awk '$2 < 500 {print $2 + 1; exit 0}')
    if [ $uid -eq 500 ]; then
        echo 'ERROR: All system uids are in use!'
        exit 1
    fi
    echo "Using uid $uid for @@ARTIFACTNAME@@"

    gid=$uid
    while dscl -search /Groups gid $gid | grep -q $gid; do
        echo "gid $gid is not free, trying next"
        gid=$(($gid + 1))
    done
    echo "Using gid $gid for @@ARTIFACTNAME@@"

    dscl . -create /Groups/@@ARTIFACTNAME@@ PrimaryGroupID $gid

    dscl . -create /Users/@@ARTIFACTNAME@@ UserShell /bin/bash
    dscl . -create /Users/@@ARTIFACTNAME@@ Password '*'
    dscl . -create /Users/@@ARTIFACTNAME@@ UniqueID $uid
    dscl . -create /Users/@@ARTIFACTNAME@@ PrimaryGroupID $gid
    dscl . -create /Users/@@ARTIFACTNAME@@ NFSHomeDirectory "$JENKINS_HOMEDIR"

    dscl . -append /Groups/@@ARTIFACTNAME@@ GroupMembership @@ARTIFACTNAME@@
fi

# identify the real default group name for user jenkins
groupid=`dscl . read /Users/@@ARTIFACTNAME@@ PrimaryGroupID | awk '{print $2}'`
gname=`id -n -g $groupid`

echo "Using @@ARTIFACTNAME@@:${gname} as file owner and group for @@ARTIFACTNAME@@ daemon files"

find "$JENKINS_HOMEDIR" \( -not -user @@ARTIFACTNAME@@ -or -not -group ${gname} \) -print0 | xargs -0 chown @@ARTIFACTNAME@@:${gname}

# Add defaults for heap sizing
arch=$(uname -m)
if [ $arch = 'x86_64' ]; then
    defaults write $DEFAULTS_PLIST heapSize 512m
    defaults write $DEFAULTS_PLIST permGen 512m
    defaults write $DEFAULTS_PLIST minHeapSize 256m
    defaults write $DEFAULTS_PLIST minPermGen 256m
else
    # i386
    defaults write $DEFAULTS_PLIST heapSize 128m
    defaults write $DEFAULTS_PLIST permGen 128m
    defaults write $DEFAULTS_PLIST minHeapSize 64m
    defaults write $DEFAULTS_PLIST minPermGen 64m    
fi

defaults write $DEFAULTS_PLIST httpPort @@PORT@@

# Set tmpdir
JENKINS_TMPDIR="$JENKINS_HOMEDIR/tmp"
defaults write $DEFAULTS_PLIST tmpdir $JENKINS_TMPDIR
mkdir -p $JENKINS_TMPDIR
chown @@ARTIFACTNAME@@:${gname} $JENKINS_TMPDIR

# Create log directory, which can be written by Jenkins daemon
mkdir -p /var/log/@@ARTIFACTNAME@@
chown @@ARTIFACTNAME@@:${gname} /var/log/@@ARTIFACTNAME@@

# Enable log rotation by newsyslog
cat <<_EOT_ > /etc/newsyslog.d/@@ARTIFACTNAME@@.conf
# logfilename          [owner:group]    mode count size when  flags [/pid_file] [sig_num]
# Rotate @@PRODUCTNAME@@ log at midnight, and preserve old logs in 3 days
/var/log/@@ARTIFACTNAME@@/@@ARTIFACTNAME@@.log   @@ARTIFACTNAME@@:${gname}         644  3     *    \$D0   J
_EOT_

# Load and start the launch daemon
/bin/launchctl load -w ${JENKINS_PLIST}

# Wait for port @@PORT@@ to start accepting connections.
# But don't wait forever.
timeout=$(($(date +%s) + 60))
while [ $(date +%s) -lt $timeout ] && ! curl -s http://localhost:@@PORT@@ >/dev/null; do
    sleep 1
done

if [ $(date +%s) -ge $timeout ]; then
    echo "Timed out waiting for @@PRODUCTNAME@@ port @@PORT@@ to start listening!"
    echo "Either @@PRODUCTNAME@@ did not load or this system is very slow."
fi
